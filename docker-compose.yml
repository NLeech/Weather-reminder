services:
  web:
    build: .
    image: leechlab/weather-reminder:latest
    depends_on:
      db:
        condition: service_healthy
      broker:
        condition: service_healthy
    healthcheck:
      test: curl -f http://localhost:80/ping/ || exit 1
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s
    working_dir: /Weather-reminder
    env_file:
      - .env
    environment:
      - PG_DATABASE_ADDRESS=db
      - REDIS_ADDRESS=broker
      - IS_DOCKER=true
    volumes:
      - "staticfiles:/Weather-reminder/django_weather_reminder/static"
    ports:
      - "8083:80"
    networks:
      - front-tier
      - back-tier
    restart: "unless-stopped"

  db:
    build: postgres
    image:  leechlab/weather-reminder-db:latest
    env_file:
      - .env
    volumes:
      - "db-data:/var/lib/postgresql/data"
    healthcheck:
      test: bash /healthchecks/postgres.sh
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      - back-tier
    restart: "unless-stopped"

  broker:
    image: redis:7.0-alpine
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      - back-tier
    volumes:
      - "broker-data:/data"
    restart: "unless-stopped"

  # this service runs once to fill the database with demo data
  # it won't run unless you specify the "fill" profile
  # docker compose --profile fill up -d
  fill:
    image: leechlab/weather-reminder:latest
    profiles: ["fill"]
    working_dir: /Weather-reminder
    env_file:
      - .env
    environment:
      - PG_DATABASE_ADDRESS=db
      - REDIS_ADDRESS=broker
      - IS_DOCKER=true
    command: python /Weather-reminder/django_weather_reminder/manage.py add_demo_data
    depends_on:
      web:
        condition: service_healthy
    networks:
      - back-tier
    restart: "no"

volumes:
  staticfiles:
  db-data:
  broker-data:

networks:
  front-tier:
  back-tier:

x-aws-cloudformation:
  Resources:
    WebTCP80TargetGroup:
      Properties:
        HealthCheckPath: /ping/
        Matcher:
          HttpCode: 200-399
